buildscript {
    repositories {
        mavenCentral()
        jcenter()

    }

    dependencies {
        classpath 'com.android.tools.build:gradle:1.2.3'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.10.1'
    }
}

import java.util.regex.Pattern
import groovy.json.*
import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.application'
apply plugin: 'com.github.ben-manes.versions'

repositories {
    mavenCentral()
    maven {
        url 'https://raw.github.com/kolavar/android-support-v4-preferencefragment/master/maven-repository/'
    }
    maven {
        url 'http://jcenter.bintray.com'
    }
}

dependencies {
    compile 'eu.chainfire:libsuperuser:1.0.0.201504231659'
    compile 'com.android.support:appcompat-v7:22.2.0'
    compile 'com.android.support:support-v4-preferencefragment:1.0.0@aar'
    androidTestCompile 'com.squareup.okhttp:mockwebserver:2.4.0'
}

preBuild {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        dependsOn 'downloadNative'
    } else {
        dependsOn 'buildNative'
    }
}

project.archivesBaseName = 'syncthing'

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        versionCode getVersionCodeFromManifest()
        testApplicationId 'com.nutomic.syncthingandroid.test'
        testInstrumentationRunner 'android.test.InstrumentationTestRunner'
        testHandleProfiling true
        testFunctionalTest true
    }

    sourceSets {
        main {
            jniLibs.srcDir file("libs/")
        }
    }

    signingConfigs {
        release {
            if (System.getenv("key_alias")) {
                storeFile = file(System.getenv("key_store"))
                storePassword = System.getenv("key_store_password")
                keyAlias = System.getenv("key_alias")
                keyPassword = System.getenv("key_alias_password")
            }
       }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            debuggable true
            testCoverageEnabled true
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-android.txt'
            if (System.getenv("key_alias")) {
                signingConfig signingConfigs.release
            }
        }
    }

    productFlavors {
        x86 {
            versionCode Integer.parseInt("4" + defaultConfig.versionCode)
            ndk {
                abiFilter "x86"
            }
        }
        arm {
            versionCode Integer.parseInt("3" + defaultConfig.versionCode)
            ndk {
                abiFilter "armeabi"
            }
        }
        fat {
            versionCode Integer.parseInt("0" + defaultConfig.versionCode)
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

def getVersionCodeFromManifest() {
    def manifestFile = file(android.sourceSets.main.manifest.srcFile)
    def pattern = Pattern.compile("versionCode=\"(\\d+)\"")
    def matcher = pattern.matcher(manifestFile.getText())
    matcher.find()
    return Integer.parseInt(matcher.group(1))
}

task downloadNative(type: Copy) {
    def release = new JsonSlurper().parseText("https://api.github.com/repos/syncthing/syncthing/releases/latest".toURL().text)

    // Download ARM
    new File('bin').mkdirs()
    copy {
        ant.get(src: "https://github.com/syncthing/syncthing/releases/download/"+release.tag_name+"/syncthing-linux-arm-"+release.tag_name+".tar.gz", dest: "bin/syncthing-arm.tar.gz")
        from tarTree(resources.gzip("bin/syncthing-arm.tar.gz"))
        into "bin/"
    }
    copy {
        from "bin/syncthing-linux-arm-"+release.tag_name
        into "bin/"
        rename('^syncthing$', 'syncthing-armeabi')
    }

    // Download X86
    copy {
        ant.get(src: "https://github.com/syncthing/syncthing/releases/download/"+release.tag_name+"/syncthing-linux-386-"+release.tag_name+".tar.gz", dest: "bin/syncthing-x86.tar.gz")
        from tarTree(resources.gzip("bin/syncthing-x86.tar.gz"))
        into "bin/"
    }
    copy {
        from "bin/syncthing-linux-386-"+release.tag_name
        into "bin/"
        rename('^syncthing$', 'syncthing-x86')
    }
}

task buildNative(type: Exec) {
    outputs.upToDateWhen { false }
    executable = './build-syncthing.sh'
}

task copyNative(type: Copy) {
    def lib_dir = "libs/"
    new File(lib_dir).mkdirs()
    def st_dir = "bin/";
    from st_dir + 'syncthing-x86', st_dir + 'syncthing-armeabi';
    into lib_dir
    rename('syncthing-x86', 'x86/libsyncthing.so')
    rename('syncthing-armeabi', 'armeabi/libsyncthing.so')
}
buildNative.finalizedBy copyNative
downloadNative.finalizedBy copyNative

task cleanBin(type: Delete) {
    delete 'bin/'
}
copyNative.finalizedBy cleanBin

task cleanNative(type: Delete) {
    delete 'bin/'
    delete 'build/'
    delete 'libs/'
    delete 'ext/syncthing/bin/'
    delete 'ext/syncthing/pkg/'
}
clean.dependsOn cleanNative

